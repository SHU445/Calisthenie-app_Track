const { MongoClient } = require('mongodb');

const uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/calisthenie-tracker';

async function checkDuplicateWorkouts() {
  const client = new MongoClient(uri);
  
  try {
    await client.connect();
    const db = client.db();
    
    console.log('üîç V√©rification des entra√Ænements dupliqu√©s...\n');
    
    // R√©cup√©rer tous les entra√Ænements
    const workouts = await db.collection('workouts').find({}).toArray();
    
    console.log(`üìä Total des entra√Ænements: ${workouts.length}`);
    
    // Grouper par userId puis v√©rifier les doublons d'ID
    const userWorkouts = {};
    const duplicateIds = {};
    
    workouts.forEach(workout => {
      const userId = workout.userId;
      const workoutId = workout.id || workout._id.toString();
      
      if (!userWorkouts[userId]) {
        userWorkouts[userId] = [];
      }
      
      userWorkouts[userId].push({
        id: workoutId,
        mongoId: workout._id.toString(),
        nom: workout.nom,
        date: workout.date
      });
    });
    
    // V√©rifier les doublons par utilisateur
    for (const [userId, workoutList] of Object.entries(userWorkouts)) {
      console.log(`\nüë§ Utilisateur: ${userId} (${workoutList.length} entra√Ænements)`);
      
      const idCounts = {};
      workoutList.forEach(workout => {
        const id = workout.id;
        if (!idCounts[id]) {
          idCounts[id] = [];
        }
        idCounts[id].push(workout);
      });
      
      // Afficher les doublons
      for (const [id, workouts] of Object.entries(idCounts)) {
        if (workouts.length > 1) {
          console.log(`  ‚ùå ID dupliqu√© "${id}" trouv√© ${workouts.length} fois:`);
          workouts.forEach((w, i) => {
            console.log(`    ${i+1}. ${w.nom} (${w.date}) - MongoDB ID: ${w.mongoId}`);
          });
          duplicateIds[id] = workouts;
        }
      }
    }
    
    if (Object.keys(duplicateIds).length === 0) {
      console.log('\n‚úÖ Aucun doublon d\'ID trouv√© !');
    } else {
      console.log(`\n‚ö†Ô∏è  ${Object.keys(duplicateIds).length} ID(s) dupliqu√©(s) trouv√©(s) !`);
      console.log('\nüí° Solutions recommand√©es:');
      console.log('   1. Ex√©cuter le script de correction des IDs');
      console.log('   2. Utiliser les MongoDB ObjectIds comme cl√©s de sauvegarde');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  } finally {
    await client.close();
  }
}

checkDuplicateWorkouts();
