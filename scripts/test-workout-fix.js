const { performance } = require('perf_hooks');

// Configuration de base
const BASE_URL = 'http://localhost:3000';

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

const log = {
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`)
};

// Fonction helper pour les requ√™tes API
async function apiRequest(endpoint, options = {}) {
  const url = `${BASE_URL}${endpoint}`;
  const defaultOptions = {
    headers: {
      'Content-Type': 'application/json',
    }
  };
  
  const response = await fetch(url, { ...defaultOptions, ...options });
  
  let data;
  try {
    data = await response.json();
  } catch (e) {
    data = null;
  }
  
  return {
    ok: response.ok,
    status: response.status,
    data
  };
}

// Test sp√©cifique de la modification d'entra√Ænements
async function testWorkoutUpdateFix() {
  log.info('üß™ Test de correction de la modification d\'entra√Ænements');
  
  // Cr√©er d'abord un entra√Ænement de test
  const testWorkout = {
    nom: 'Test Update Fix',
    date: new Date().toISOString().split('T')[0],
    type: 'Force',
    duree: 45,
    description: 'Entra√Ænement pour tester la modification',
    userId: 'test-user-workout-fix',
    sets: [],
    ressenti: 3
  };
  
  let workoutId = null;
  
  try {
    // √âtape 1: Cr√©er un entra√Ænement
    log.info('Cr√©ation d\'un entra√Ænement de test...');
    const createResult = await apiRequest('/api/workouts', {
      method: 'POST',
      body: JSON.stringify(testWorkout)
    });
    
    if (!createResult.ok) {
      log.error(`√âchec cr√©ation: ${createResult.data?.error || 'Erreur inconnue'}`);
      return false;
    }
    
    workoutId = createResult.data.id;
    log.success(`Entra√Ænement cr√©√© avec ID: ${workoutId}`);
    
    // √âtape 2: V√©rifier que l'entra√Ænement existe
    log.info('V√©rification de l\'existence de l\'entra√Ænement...');
    const getResult = await apiRequest(`/api/workouts/${workoutId}`);
    
    if (!getResult.ok) {
      log.error(`Entra√Ænement non trouv√© apr√®s cr√©ation: ${getResult.status}`);
      return false;
    }
    
    log.success(`Entra√Ænement trouv√©: ${getResult.data.nom}`);
    
    // √âtape 3: Tenter la modification
    log.info('Tentative de modification...');
    const updateData = {
      nom: 'Test Update Fix - Modifi√©',
      duree: 60,
      description: 'Description modifi√©e'
    };
    
    const updateResult = await apiRequest(`/api/workouts/${workoutId}`, {
      method: 'PUT',
      body: JSON.stringify(updateData)
    });
    
    if (!updateResult.ok) {
      log.error(`√âchec modification: ${updateResult.status} - ${updateResult.data?.error || 'Erreur inconnue'}`);
      return false;
    }
    
    log.success('Entra√Ænement modifi√© avec succ√®s !');
    
    // √âtape 4: V√©rifier que les modifications ont √©t√© appliqu√©es
    log.info('V√©rification des modifications...');
    const verifyResult = await apiRequest(`/api/workouts/${workoutId}`);
    
    if (!verifyResult.ok) {
      log.error('Impossible de v√©rifier les modifications');
      return false;
    }
    
    const modifiedWorkout = verifyResult.data;
    if (modifiedWorkout.nom === updateData.nom && 
        modifiedWorkout.duree === updateData.duree &&
        modifiedWorkout.description === updateData.description) {
      log.success('Modifications v√©rifi√©es avec succ√®s !');
    } else {
      log.error('Les modifications n\'ont pas √©t√© appliqu√©es correctement');
      return false;
    }
    
    // √âtape 5: Nettoyer (supprimer l'entra√Ænement de test)
    log.info('Nettoyage...');
    const deleteResult = await apiRequest(`/api/workouts/${workoutId}`, {
      method: 'DELETE'
    });
    
    if (deleteResult.ok) {
      log.success('Entra√Ænement de test supprim√©');
    }
    
    return true;
    
  } catch (error) {
    log.error(`Erreur lors du test: ${error.message}`);
    return false;
  }
}

// Test avec un entra√Ænement existant (avec ObjectId)
async function testExistingWorkoutUpdate() {
  log.info('üîç Test de modification d\'entra√Ænement existant');
  
  try {
    // R√©cup√©rer tous les entra√Ænements d'un utilisateur test
    const getAllResult = await apiRequest('/api/workouts?userId=test-user-123');
    
    if (!getAllResult.ok) {
      log.warning('Impossible de r√©cup√©rer les entra√Ænements existants');
      return true; // Pas d'erreur si pas d'entra√Ænements
    }
    
    const workouts = getAllResult.data;
    
    if (!Array.isArray(workouts) || workouts.length === 0) {
      log.warning('Aucun entra√Ænement existant trouv√©');
      return true;
    }
    
    // Prendre le premier entra√Ænement
    const workoutToUpdate = workouts[0];
    log.info(`Test avec entra√Ænement existant: ${workoutToUpdate.nom} (ID: ${workoutToUpdate.id})`);
    
    // Donn√©es de modification l√©g√®res
    const updateData = {
      description: 'Description mise √† jour par test de correction'
    };
    
    // Tenter la modification
    const updateResult = await apiRequest(`/api/workouts/${workoutToUpdate.id}`, {
      method: 'PUT',
      body: JSON.stringify(updateData)
    });
    
    if (!updateResult.ok) {
      log.error(`√âchec modification entra√Ænement existant: ${updateResult.status} - ${updateResult.data?.error || 'Erreur inconnue'}`);
      log.info(`ID utilis√©: ${workoutToUpdate.id}`);
      log.info(`Type d'ID: ${typeof workoutToUpdate.id}`);
      log.info(`Longueur ID: ${workoutToUpdate.id.length}`);
      return false;
    }
    
    log.success('Entra√Ænement existant modifi√© avec succ√®s !');
    return true;
    
  } catch (error) {
    log.error(`Erreur lors du test d'entra√Ænement existant: ${error.message}`);
    return false;
  }
}

// Fonction principale
async function runWorkoutUpdateTests() {
  console.log('üöÄ Tests de correction de la modification d\'entra√Ænements\n');
  
  const startTime = performance.now();
  
  try {
    // Test 1: Cr√©er et modifier un nouvel entra√Ænement
    const newWorkoutTest = await testWorkoutUpdateFix();
    console.log('');
    
    // Test 2: Modifier un entra√Ænement existant
    const existingWorkoutTest = await testExistingWorkoutUpdate();
    console.log('');
    
    const endTime = performance.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    // R√©sum√©
    if (newWorkoutTest && existingWorkoutTest) {
      log.success(`üéâ Tous les tests de modification sont pass√©s ! (${duration}s)`);
      log.info('La correction de la modification fonctionne correctement.');
    } else {
      log.warning(`‚ö†Ô∏è Certains tests ont √©chou√©. (${duration}s)`);
      
      if (!newWorkoutTest) {
        log.error('- Probl√®me avec la modification de nouveaux entra√Ænements');
      }
      if (!existingWorkoutTest) {
        log.error('- Probl√®me avec la modification d\'entra√Ænements existants');
      }
    }
    
  } catch (error) {
    log.error(`Erreur g√©n√©rale lors des tests: ${error.message}`);
  }
}

// V√©rification si le serveur est accessible
async function checkServerStatus() {
  try {
    const response = await fetch(`${BASE_URL}/api/workouts?userId=test`);
    if (!response.ok && response.status !== 400) { // 400 est OK car on teste sans userId valide
      log.warning('Le serveur semble ne pas r√©pondre correctement');
      log.info('Assurez-vous que le serveur Next.js est en cours d\'ex√©cution (npm run dev)');
      process.exit(1);
    }
    log.success('Serveur accessible');
  } catch (error) {
    log.error('Impossible de se connecter au serveur');
    log.info('Veuillez d√©marrer le serveur avec: npm run dev');
    process.exit(1);
  }
}

// Ex√©cution
async function main() {
  await checkServerStatus();
  await runWorkoutUpdateTests();
}

main();
